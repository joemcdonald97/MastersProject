#BlueJ class context
comment0.target=IrisMatching
comment0.text=\n\ Iris\ Matching\ project\ using\ eigenvectors.\ \n\n\ @author\ (Joe\ McDonald)\n\ @version\ (2020)\n
comment1.params=
comment1.target=IrisMatching()
comment1.text=\n\ Constructor\ for\ objects\ of\ class\ IrisMatching\n
comment10.params=
comment10.target=double\ matchEuclidean()
comment10.text=\n\ Match\ Euclidean\ Distance\n\ \ \n\ finds\ the\ distane\ between\ the\ training\ weights\ with\ the\ test\ weights\ \n\ using\ Euclidean\ distance\n\ \ \n\ \ \n\ @return\ \ \ double\ training\ image\ that\ has\ the\ shortest\ distance\ to\ test\ image\n
comment11.params=
comment11.target=double\ matchManhattan()
comment11.text=\n\ Match\ Manhattan\ Distance\n\ \ \n\ finds\ the\ distane\ between\ the\ training\ weights\ with\ the\ test\ weights\ \n\ using\ Manhattan\ distance\n\ \ \n\ \ \n\ @return\ \ \ double\ training\ image\ that\ has\ the\ shortest\ distance\ to\ test\ image\n
comment12.params=
comment12.target=double\ matchMinkowski()
comment12.text=\n\ Match\ Minkowski^3\ Distance\n\ \ \n\ finds\ the\ distane\ between\ the\ training\ weights\ with\ the\ test\ weights\ \n\ using\ Minkowski^3\ distance\n\ \ \n\ \ \n\ @return\ \ \ double\ training\ image\ that\ has\ the\ shortest\ distance\ to\ test\ image\n
comment13.params=
comment13.target=double\ matchMinkowski4()
comment13.text=\n\ Match\ Minkowski^4\ Distance\n\ \ \n\ finds\ the\ distane\ between\ the\ training\ weights\ with\ the\ test\ weights\ \n\ using\ Minkowski^4\ distance\n\ \ \n\ \ \n\ @return\ \ \ double\ training\ image\ that\ has\ the\ shortest\ distance\ to\ test\ image\n
comment2.params=filename
comment2.target=double[][]\ readImage1(java.lang.String)
comment2.text=\n\ Read\ Image\n\ \n\ Each\ image\ in\ read\ using\ getRGB,\ the\ values\ are\ then\ added\ to\ a\ column\n\ The\ array\ is\ then\ filled\ out\ with\ different\ images\n\n\n\ @param\ \ String-\ the\ file\ input\ \n\ @return\ \ \ Array\ of\ the\ rgb\ values\n
comment3.params=
comment3.target=double[][]\ normaliseArray()
comment3.text=\n\ Normalise\ array\n\ \n\ The\ array\ from\ the\ read\ image\ method\ is\ then\ normalised\n\ \n\ Average\ row\ value\ is\ found\ in\ the\ first\ loop\ and\ stored\ in\ array\ so\ \n\ can\ be\ employed\ later\n\ \ \n\ The\ average\ row\ value\ is\ then\ subtracted\ from\ the\ respected\ row\n\ \ \n\ \ \n\ \ \n\ @return\ \ \ normalised\ array\n
comment4.params=
comment4.target=double[][]\ SVD()
comment4.text=\n\ SVD\n\ \ \n\ Uses\ Jamas\ SVD\ to\ return\ the\ eigenvectors\ in\ pc\ array\ \n\ \ \n\ Normalised\ array\ needs\ to\ be\ converted\ to\ matrix\ and\ back\ to\ array\n\ \ \n\ @return\ \ \ eigenvectors\ array\n
comment5.params=m
comment5.target=double[][]\ convertMatrix(Jama.Matrix)
comment5.text=\n\ Converts\ martix\ to\ array\n\ \ \n\ \ \n\ @return\ \ \ double\ array\n
comment6.params=
comment6.target=double[][]\ findWeights()
comment6.text=\n\ Finds\ Weights\n\ \ \n\ finds\ the\ weights\ by\ multiplying\ normalised\ array\ with\ eigenvectors\ \n\ saved\ into\ new\ array\ which\ is\ then\ summed\ to\ find\ the\ weights\ for\ each\ image\n\ these\ weights\ are\ saved\ into\ a\ new\ array\ \n\ \ \n\ @return\ \ \ double\ array\ of\ weights\n
comment7.params=filename
comment7.target=double[][]\ readTestImage(java.lang.String)
comment7.text=\n\ Read\ Test\ Image\n\ \n\ Test\ image\ is\ read\ using\ getRGB,\ the\ values\ are\ then\ added\ to\ a\ column\n\ \n\n\ @param\ \ String-\ the\ test\ file\ input\ \n\ @return\ \ \ Array\ of\ the\ rgb\ values\n
comment8.params=
comment8.target=double[][]\ normaliseTestArray()
comment8.text=\n\ Normalise\ array\n\ \n\ The\ array\ from\ the\ read\ test\ image\ method\ is\ then\ normalised\n\ with\ the\ averages\ calculated\ in\ normalise\ array\ method\n\ \ \n\ \ \n\ \ \n\ @return\ \ \ normalised\ test\ array\n
comment9.params=
comment9.target=double[][]\ findTestWeights()
comment9.text=\n\ Finds\ Test\ Weights\n\ \ \n\ finds\ the\ weights\ by\ multiplying\ normalised\ array\ with\ eigenvectors\ \n\ saved\ into\ new\ array\ which\ is\ then\ summed\ to\ find\ the\ weights\ for\ each\ image\n\ these\ weights\ are\ saved\ into\ a\ new\ array\ \n\ \ \n\ @return\ \ \ double\ array\ of\ test\ weights\n
numComments=14
